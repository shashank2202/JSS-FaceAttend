import React, { useState, useEffect } from "react";
import Calendar from "react-calendar";
import "react-calendar/dist/Calendar.css";
import jsPDF from "jspdf";
import { useNavigate } from "react-router-dom";
import Footer from "./Footer.jsx";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Cell,
} from "recharts";


// Constants
const COLORS = ["#0e4b6b", "#f26625"];
const BACKEND_URL = "https://13.49.154.188";

const Dashboard = () => {
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [attendanceData, setAttendanceData] = useState([]);
  const [selectedStudent, setSelectedStudent] = useState(null);
  const [studentStats, setStudentStats] = useState(null);
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [uploadStudentId, setUploadStudentId] = useState("");
  const [uploadFiles, setUploadFiles] = useState([]);
  const [uploadStatus, setUploadStatus] = useState("");
  const navigate = useNavigate();
  const timeSlots = ["Morning Session", "Afternoon Session", "Evening Session"];
  const TOTAL_STUDENTS = 40;

  useEffect(() => {
    const user = localStorage.getItem("loggedInUser");
    if (!user) navigate("/login");
  }, [navigate]);

  const formatDateIST = (date) => {
    const offsetMs = date.getTimezoneOffset() * 60000;
    return new Date(date.getTime() - offsetMs).toISOString().split("T")[0];
  };

  const getTimeSlot = (slot) => {
    if (slot === "slot_1") return "Morning Session";
    if (slot === "slot_2") return "Afternoon Session";
    if (slot === "slot_3") return "Evening Session";
    return "Other Session";
  };

  const fetchAttendance = async () => {
    try {
      const date = formatDateIST(selectedDate);
      const res = await fetch(`${BACKEND_URL}/fetch-attendance?date=${date}`);
      const data = await res.json();
      setAttendanceData(data);
    } catch (err) {
      console.error("Fetch error:", err);
    }
  };

  useEffect(() => {
    fetchAttendance();
    setSelectedSlot(null);
  }, [selectedDate]);

  const fetchStudentStats = (id) => {
    const attended = Math.floor(Math.random() * TOTAL_STUDENTS);
    const missed = TOTAL_STUDENTS - attended;
    setStudentStats([
      { name: "Attended", value: attended },
      { name: "Missed", value: missed },
    ]);
  };

  const downloadPDF = () => {
    const doc = new jsPDF();
  
    // Header background
    doc.setFillColor(14, 75, 107); // #0e4b6b blue
    doc.rect(0, 0, 210, 25, 'F'); // Full width header bar
  
    // Header title text - white color
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(22);
    doc.setFont("helvetica", "bold");
    doc.text("Attendance Report", 105, 17, null, null, "center");
  
    // Date below header
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.setFont("helvetica", "normal");
    doc.text(`Date: ${selectedDate.toDateString()}`, 20, 40);
  
    // Prepare filtered attendance data
    const toPrint = selectedSlot
      ? attendanceData.filter((s) => getTimeSlot(s.slot) === selectedSlot)
      : attendanceData;
  
    if (toPrint.length === 0) {
      doc.text("No attendance records for selected date/session.", 20, 60);
    } else {
      // Table headers
      const startY = 50;
      doc.setFillColor(242, 102, 37); // #f26625 orange
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(14);
      doc.setFont("helvetica", "bold");
  
      // Column positions optimized for full width
      const colNoX = 15;
      const colStudentIDX = 40;
      const colSessionX = 160;
  
      // Header background width to cover all columns (15 left + 170 width)
      doc.rect(colNoX - 2, startY - 10, 185, 10, 'F');
  
      doc.text("No.", colNoX, startY - 3);
      doc.text("Student ID", colStudentIDX, startY - 3);
      doc.text("Session", colSessionX, startY - 3);
  
      // Table content - alternating row colors
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.setFont("helvetica", "normal");
  
      toPrint.forEach((s, i) => {
        const y = startY + i * 10;
        if (i % 2 === 0) {
          doc.setFillColor(245, 245, 245); // light grey
          doc.rect(colNoX - 2, y - 7, 185, 10, 'F');
        }
  
        doc.text(String(i + 1), colNoX, y);
        doc.text(s.student_id, colStudentIDX, y);
        doc.text(getTimeSlot(s.slot), colSessionX, y);
      });
    }
  
    // Footer - page number or note
    const pageHeight = doc.internal.pageSize.height || doc.internal.pageSize.getHeight();
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text(
      "Generated by Attendance Dashboard",
      105,
      pageHeight - 10,
      null,
      null,
      "center"
    );
  
    // Save PDF
    doc.save("attendance_report.pdf");
  };  
  
  
  

  const handleUpload = async () => {
    if (!uploadStudentId || uploadFiles.length === 0) {
      setUploadStatus("Enter ID and select images");
      return;
    }
    const formData = new FormData();
    formData.append("student_id", uploadStudentId);
    Array.from(uploadFiles).forEach((f) => formData.append("files", f));
    try {
      const res = await fetch(`${BACKEND_URL}/upload-images`, {
        method: "POST",
        body: formData,
      });
      if (!res.ok) throw new Error("Upload failed");
      setUploadStatus("Upload successful");
    } catch (err) {
      setUploadStatus("Upload error");
    }
  };

  const handleTrainStudent = async () => {
    if (!uploadStudentId) {
      setUploadStatus("Enter Student ID");
      return;
    }
    try {
      const res = await fetch(
        `${BACKEND_URL}/train-student?student_id=${uploadStudentId}`,
        { method: "POST" }
      );
      if (!res.ok) throw new Error("Training failed");
      setUploadStatus("Training successful");
    } catch (err) {
      setUploadStatus("Training error");
    }
  };

  const filteredData = selectedSlot
    ? attendanceData.filter((s) => getTimeSlot(s.slot) === selectedSlot)
    : [];

  const presentCount = filteredData.length;
  const absentCount = TOTAL_STUDENTS - presentCount;

  return (
    <div>
    <div className="min-h-screen bg-white text-[#f26625] px-6 py-8 font-sans">
      {/* Header with orange + blue title */}
      <header className="flex justify-between items-center mb-10 py-4 px-6 bg-white border-b-4 border-[#f26625] shadow-md">
        <h1 className="text-4xl font-extrabold tracking-tight">
          {/* <span className="text-[#f26625]">JSS</span>{" "} */}
          <span className="text-[#0e4b6b]">Attendance Dashboard</span>
        </h1>
        <button
          onClick={() => {
            localStorage.removeItem("loggedInUser");
            navigate("/login");
          }}
          className="bg-[#f26625] text-white font-bold px-5 py-2 rounded-lg hover:bg-orange-600 transition"
        >
          Logout
        </button>
      </header>

      {/* Main Grid */}
      <main className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Calendar */}
        <section className="bg-[#f9f6f4] p-6 rounded-xl shadow-md col-span-1">
          <h2 className="text-xl font-semibold mb-4">Select Date</h2>
          <Calendar onChange={setSelectedDate} value={selectedDate} />
          <button
            onClick={downloadPDF}
            className="mt-6 bg-[#f26625] text-white font-semibold px-6 py-2 rounded-lg hover:bg-orange-600 w-full"
          >
            Download PDF
          </button>
        </section>

        {/* Session buttons */}
        <section className="bg-[#f9f6f4] p-6 rounded-xl shadow-md col-span-1">
          <h2 className="text-xl font-semibold mb-5 text-[#0e4b6b]">Sessions</h2>
          <div className="flex flex-col gap-4">
            {timeSlots.map((slot, idx) => (
              <button
                key={idx}
                className={`text-left px-5 py-3 rounded-lg font-semibold border-2 transition duration-300
                  ${
                    selectedSlot === slot
                      ? "bg-[#f26625] text-white border-[#f26625]"
                      : "bg-white text-[#0e4b6b] border-[#0e4b6b] hover:bg-blue-100"
                  }`}
                onClick={() => setSelectedSlot(slot)}
              >
                {slot}
              </button>
            ))}
          </div>
        </section>

        {/* Attendance Summary */}
        <section className="bg-[#f9f6f4] p-6 rounded-xl shadow-md col-span-1">
          <h2 className="text-xl font-semibold mb-5 text-[#0e4b6b]">Attendance Summary</h2>
          {selectedSlot ? (
            <div className="space-y-4 font-semibold text-[#0e4b6b]">
              <p>Session: {selectedSlot}</p>
              <p>
                Present: <span className="text-green-600">{presentCount}</span>
              </p>
              <p>
                Absent: <span className="text-red-600">{absentCount}</span>
              </p>
              <p>
                Total: <span className="text-[#0e4b6b]">{TOTAL_STUDENTS}</span>
              </p>
              <hr className="my-3 border-[#f26625]" />
              <h3 className="text-lg font-semibold">Students Present</h3>
              {filteredData.length ? (
                <ul className="max-h-48 overflow-y-auto border border-[#f26625] rounded-md p-2 bg-white">
                  {filteredData.map((student, i) => (
                    <li
                      key={i}
                      className="p-1 cursor-pointer hover:bg-orange-100 rounded"
                      onClick={() => {
                        setSelectedStudent(student);
                        fetchStudentStats(student.student_id);
                      }}
                    >
                      {student.student_id}
                    </li>
                  ))}
                </ul>
              ) : (
                <p>No students present in this session.</p>
              )}
            </div>
          ) : (
            <p className="text-[#f26625]">Select a session to see attendance.</p>
          )}
        </section>

        {/* Student Graph */}
        <section className="col-span-3 bg-[#f1f7fa] p-6 rounded-xl mt-6 shadow-lg">
          {selectedStudent && studentStats && (
            <>
              <h3 className="text-xl font-semibold text-[#0e4b6b] mb-4">
                Stats - {selectedStudent.student_id}
              </h3>
              <ResponsiveContainer width="100%" height={250}>
                <BarChart data={studentStats}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="value" fill="#8884d8">
                    {studentStats.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Bar>
                </BarChart>
              </ResponsiveContainer>
            </>
          )}
        </section>

        {/* Image Upload Section */}
        <section className="col-span-3 bg-[#f9f6f4] p-6 rounded-xl shadow-md">
          <h2 className="text-xl font-semibold text-[#0e4b6b] mb-4">Upload Student Images</h2>

          <div className="flex flex-col sm:flex-row sm:items-center gap-4 mb-4">
            <input
              type="text"
              placeholder="Enter Student ID"
              className="border border-[#0e4b6b] rounded-md px-3 py-2 text-[#0e4b6b] w-full sm:w-64"
              value={uploadStudentId}
              onChange={(e) => setUploadStudentId(e.target.value)}
            />

            {/* Hidden file input */}
            <input
              type="file"
              id="fileInput"
              multiple
              accept="image/*"
              onChange={(e) => setUploadFiles(e.target.files)}
              className="hidden"
            />
            {/* Styled button triggers hidden input */}
            <label
              htmlFor="fileInput"
              className="cursor-pointer bg-[#f26625] text-white px-5 py-2 rounded-lg font-semibold hover:bg-orange-600 transition text-center"
            >
              Choose Images
            </label>
          </div>

          <div className="mb-4 text-[#0e4b6b] font-medium">
            {uploadFiles.length > 0 &&
              Array.from(uploadFiles).map((file, idx) => (
                <div key={idx} className="text-sm">
                  {file.name}
                </div>
              ))}
          </div>

          <div className="flex gap-4">
            <button
              onClick={handleUpload}
              className="bg-[#0e4b6b] text-white px-6 py-2 rounded-lg hover:bg-blue-800 transition font-semibold"
            >
              Upload Images
            </button>
            <button
              onClick={handleTrainStudent}
              className="bg-[#f26625] text-white px-6 py-2 rounded-lg hover:bg-orange-600 transition font-semibold"
            >
              Train Student
            </button>
          </div>

          {uploadStatus && (
            <p className="mt-3 text-center text-[#f26625] font-semibold">{uploadStatus}</p>
          )}
        </section>
      </main>
            
    </div>
    <Footer/>

    </div>
  );
};


export default Dashboard;
